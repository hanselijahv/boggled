module BoggledApp {

    struct GameWinner {
        string gameID;
        string playerID;
        long winningScore;
    };

    struct RoundWinner {
        string gameID;
        string playerID;
        long roundScore;
    };

    struct GamePlayer {
        string gameID;
        string playerID;
        long roundWins;
        boolean playerConnected;
    };

    exception UserNotFoundException {
        string reason;
    };

    exception NotLoggedInException {
        string reason;
    };

    exception InsufficientPlayersException {
        string reason;
    };

    exception InvalidWordException {
        string reason;
    };

    interface Boggled {
        typedef sequence<GameWinner> leaderboards;
        typedef sequence<GamePlayer> gamePlayers;
        typedef sequence<char> letters;

        // authentication logic
        void login(in string username, in string password) raises (UserNotFoundException);
        void logout(in string username) raises (NotLoggedInException);

        // game logic
        string playGame(in string username) raises (InsufficientPlayersException);
        void sendWord(in string gameID, in string word) raises (InvalidWordException);
        letters getLetters(in string gameID);
        boolean isGameOver(in string gameID);
        boolean isRoundOver(in string gameID);
        RoundWinner getRoundWinner(in string gameID);
        GameWinner getGameWinner(in string gameID);

        // setting logic
        long getRoundTime(in string gameID);
        long getWaitingTime(in string gameID);
        long getNumRounds(in string gameID);

        // UI
        leaderboards getLeaderboards();
        gamePlayers getGamePlayers(in string gameID);
    };
};
