// This file is generated by omniidl (C++ backend)- omniORB_4_3. Do not edit.
#ifndef __boggled_hh__
#define __boggled_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_boggled
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_boggled
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_boggled
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE BoggledApp

_CORBA_MODULE_BEG

  class UserNotFoundException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline UserNotFoundException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    UserNotFoundException(const UserNotFoundException&);
    UserNotFoundException(const char* i_reason);
    UserNotFoundException& operator=(const UserNotFoundException&);
    virtual ~UserNotFoundException();
    virtual void _raise() const;
    static UserNotFoundException* _downcast(::CORBA::Exception*);
    static const UserNotFoundException* _downcast(const ::CORBA::Exception*);
    static inline UserNotFoundException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  class AlreadyLoggedInException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline AlreadyLoggedInException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    AlreadyLoggedInException(const AlreadyLoggedInException&);
    AlreadyLoggedInException(const char* i_reason);
    AlreadyLoggedInException& operator=(const AlreadyLoggedInException&);
    virtual ~AlreadyLoggedInException();
    virtual void _raise() const;
    static AlreadyLoggedInException* _downcast(::CORBA::Exception*);
    static const AlreadyLoggedInException* _downcast(const ::CORBA::Exception*);
    static inline AlreadyLoggedInException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  class InsufficientPlayerException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline InsufficientPlayerException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    InsufficientPlayerException(const InsufficientPlayerException&);
    InsufficientPlayerException(const char* i_reason);
    InsufficientPlayerException& operator=(const InsufficientPlayerException&);
    virtual ~InsufficientPlayerException();
    virtual void _raise() const;
    static InsufficientPlayerException* _downcast(::CORBA::Exception*);
    static const InsufficientPlayerException* _downcast(const ::CORBA::Exception*);
    static inline InsufficientPlayerException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

#ifndef __BoggledApp_mCallback__
#define __BoggledApp_mCallback__
  class Callback;
  class _objref_Callback;
  class _impl_Callback;
  
  typedef _objref_Callback* Callback_ptr;
  typedef Callback_ptr CallbackRef;

  class Callback_Helper {
  public:
    typedef Callback_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Callback, Callback_Helper> Callback_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Callback,Callback_Helper > Callback_out;

#endif

  // interface Callback
  class Callback {
  public:
    // Declarations for this interface type.
    typedef Callback_ptr _ptr_type;
    typedef Callback_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Callback :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void notify(const char* message);

    // Constructors
    inline _objref_Callback()  { _PR_setobj(0); }  // nil
    _objref_Callback(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Callback();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Callback(const _objref_Callback&);
    _objref_Callback& operator = (const _objref_Callback&);
    // not implemented

    friend class Callback;
  };

  class _pof_Callback : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Callback() : _OMNI_NS(proxyObjectFactory)(Callback::_PD_repoId) {}
    virtual ~_pof_Callback();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Callback :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Callback();

    virtual void notify(const char* message) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __BoggledApp_mBoggled__
#define __BoggledApp_mBoggled__
  class Boggled;
  class _objref_Boggled;
  class _impl_Boggled;
  
  typedef _objref_Boggled* Boggled_ptr;
  typedef Boggled_ptr BoggledRef;

  class Boggled_Helper {
  public:
    typedef Boggled_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Boggled, Boggled_Helper> Boggled_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Boggled,Boggled_Helper > Boggled_out;

#endif

  // interface Boggled
  class Boggled {
  public:
    // Declarations for this interface type.
    typedef Boggled_ptr _ptr_type;
    typedef Boggled_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Boggled :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void login(const char* username, const char* password);
    void joinWaitingRoom(const char* playerName);
    char* say(::BoggledApp::Callback_ptr objRef, const char* message);
    ::CORBA::Boolean isGameReadyToStart();
    char* getWaitingTime(::BoggledApp::Callback_ptr objRef);
    char* getWaitingRoomInfo(const char* playerName);
    ::CORBA::Boolean submitWord(const char* word, ::CORBA::Boolean& isValid, ::CORBA::Boolean& canForm, ::CORBA::String_out response);
    char* getGameID(::BoggledApp::Callback_ptr objRef, const char* playerName);
    char* getLetters(const char* gameID);

    // Constructors
    inline _objref_Boggled()  { _PR_setobj(0); }  // nil
    _objref_Boggled(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Boggled();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Boggled(const _objref_Boggled&);
    _objref_Boggled& operator = (const _objref_Boggled&);
    // not implemented

    friend class Boggled;
  };

  class _pof_Boggled : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Boggled() : _OMNI_NS(proxyObjectFactory)(Boggled::_PD_repoId) {}
    virtual ~_pof_Boggled();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Boggled :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Boggled();

    virtual void login(const char* username, const char* password) = 0;
    virtual void joinWaitingRoom(const char* playerName) = 0;
    virtual char* say(::BoggledApp::Callback_ptr objRef, const char* message) = 0;
    virtual ::CORBA::Boolean isGameReadyToStart() = 0;
    virtual char* getWaitingTime(::BoggledApp::Callback_ptr objRef) = 0;
    virtual char* getWaitingRoomInfo(const char* playerName) = 0;
    virtual ::CORBA::Boolean submitWord(const char* word, ::CORBA::Boolean& isValid, ::CORBA::Boolean& canForm, ::CORBA::String_out response) = 0;
    virtual char* getGameID(::BoggledApp::Callback_ptr objRef, const char* playerName) = 0;
    virtual char* getLetters(const char* gameID) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_BoggledApp
_CORBA_MODULE_BEG

  class Callback :
    public virtual BoggledApp::_impl_Callback,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Callback();

    inline ::BoggledApp::Callback_ptr _this() {
      return (::BoggledApp::Callback_ptr) _do_this(::BoggledApp::Callback::_PD_repoId);
    }
  };

  class Boggled :
    public virtual BoggledApp::_impl_Boggled,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Boggled();

    inline ::BoggledApp::Boggled_ptr _this() {
      return (::BoggledApp::Boggled_ptr) _do_this(::BoggledApp::Boggled::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_BoggledApp
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
BoggledApp::Callback::_marshalObjRef(::BoggledApp::Callback_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
BoggledApp::Boggled::_marshalObjRef(::BoggledApp::Boggled_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_boggled
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_boggled
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_boggled
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_boggled
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_boggled
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_boggled
#endif

#endif  // __boggled_hh__

