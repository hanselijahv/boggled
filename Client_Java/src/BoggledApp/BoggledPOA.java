package BoggledApp;


/**
* BoggledApp/BoggledPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from boggled.idl
* Saturday, June 29, 2024 7:58:30 PM SGT
*/

public abstract class BoggledPOA extends org.omg.PortableServer.Servant
 implements BoggledOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new Integer (0));
    _methods.put ("joinWaitingRoom", new Integer (1));
    _methods.put ("isGameReadyToStart", new Integer (2));
    _methods.put ("getWaitingTime", new Integer (3));
    _methods.put ("getWaitingRoomInfo", new Integer (4));
    _methods.put ("getRoundTime", new Integer (5));
    _methods.put ("submitWord", new Integer (6));
    _methods.put ("getGameID", new Integer (7));
    _methods.put ("getLetters", new Integer (8));
    _methods.put ("logout", new Integer (9));
    _methods.put ("gameWinner", new Integer (10));
    _methods.put ("roundWinner", new Integer (11));
    _methods.put ("roundPoints", new Integer (12));
    _methods.put ("playerPoints", new Integer (13));
    _methods.put ("isGameFinished", new Integer (14));
    _methods.put ("gameScore", new Integer (15));
    _methods.put ("currentRound", new Integer (16));
    _methods.put ("getLeaderboard", new Integer (17));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // BoggledApp/Boggled/login
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           this.login (username, password);
           out = $rh.createReply();
         } catch (UserNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           UserNotFoundExceptionHelper.write (out, $ex);
         } catch (AlreadyLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           AlreadyLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // BoggledApp/Boggled/joinWaitingRoom
       {
         String playerName = in.read_string ();
         this.joinWaitingRoom (playerName);
         out = $rh.createReply();
         break;
       }

       case 2:  // BoggledApp/Boggled/isGameReadyToStart
       {
         boolean $result = false;
         $result = this.isGameReadyToStart ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // BoggledApp/Boggled/getWaitingTime
       {
         Callback objRef = CallbackHelper.read (in);
         String $result = null;
         $result = this.getWaitingTime (objRef);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // BoggledApp/Boggled/getWaitingRoomInfo
       {
         String playerName = in.read_string ();
         String $result = null;
         $result = this.getWaitingRoomInfo (playerName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // BoggledApp/Boggled/getRoundTime
       {
         Callback objRef = CallbackHelper.read (in);
         String gameID = in.read_string ();
         String $result = null;
         $result = this.getRoundTime (objRef, gameID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // BoggledApp/Boggled/submitWord
       {
         String gameID = in.read_string ();
         String playerName = in.read_string ();
         String word = in.read_string ();
         org.omg.CORBA.BooleanHolder isValid = new org.omg.CORBA.BooleanHolder ();
         org.omg.CORBA.BooleanHolder canForm = new org.omg.CORBA.BooleanHolder ();
         org.omg.CORBA.StringHolder response = new org.omg.CORBA.StringHolder ();
         boolean $result = false;
         $result = this.submitWord (gameID, playerName, word, isValid, canForm, response);
         out = $rh.createReply();
         out.write_boolean ($result);
         out.write_boolean (isValid.value);
         out.write_boolean (canForm.value);
         out.write_string (response.value);
         break;
       }

       case 7:  // BoggledApp/Boggled/getGameID
       {
         Callback objRef = CallbackHelper.read (in);
         String playerName = in.read_string ();
         String $result = null;
         $result = this.getGameID (objRef, playerName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // BoggledApp/Boggled/getLetters
       {
         String gameID = in.read_string ();
         String $result = null;
         $result = this.getLetters (gameID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // BoggledApp/Boggled/logout
       {
         try {
           String username = in.read_string ();
           this.logout (username);
           out = $rh.createReply();
         } catch (NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 10:  // BoggledApp/Boggled/gameWinner
       {
         String gameID = in.read_string ();
         String $result = null;
         $result = this.gameWinner (gameID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 11:  // BoggledApp/Boggled/roundWinner
       {
         try {
           String gameID = in.read_string ();
           String $result = null;
           $result = this.roundWinner (gameID);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (NoWinnerException $ex) {
           out = $rh.createExceptionReply ();
           NoWinnerExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 12:  // BoggledApp/Boggled/roundPoints
       {
         String gameID = in.read_string ();
         String playerName = in.read_string ();
         int $result = (int)0;
         $result = this.roundPoints (gameID, playerName);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 13:  // BoggledApp/Boggled/playerPoints
       {
         String gameID = in.read_string ();
         String playerName = in.read_string ();
         int $result = (int)0;
         $result = this.playerPoints (gameID, playerName);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 14:  // BoggledApp/Boggled/isGameFinished
       {
         String gameID = in.read_string ();
         boolean $result = false;
         $result = this.isGameFinished (gameID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 15:  // BoggledApp/Boggled/gameScore
       {
         String gameID = in.read_string ();
         String $result = null;
         $result = this.gameScore (gameID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 16:  // BoggledApp/Boggled/currentRound
       {
         String gameID = in.read_string ();
         int $result = (int)0;
         $result = this.currentRound (gameID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 17:  // BoggledApp/Boggled/getLeaderboard
       {
         Leaderboards $result = null;
         $result = this.getLeaderboard ();
         out = $rh.createReply();
         LeaderboardsHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BoggledApp/Boggled:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Boggled _this() 
  {
    return BoggledHelper.narrow(
    super._this_object());
  }

  public Boggled _this(org.omg.CORBA.ORB orb) 
  {
    return BoggledHelper.narrow(
    super._this_object(orb));
  }


} // class BoggledPOA
